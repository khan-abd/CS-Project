'''AIM OF THIS PROJECT:
To compare the prices of a user defined product from two e-commerce websites
-Amazon and Flipkart through web scraping and web formatting
Features of this version:'''

#Top 3 search results will be displayed when the user inputs the product name

import requests
from bs4 import BeautifulSoup


#AMAZON EXTRACTION


searchprod=input("Enter product to be searched: ")
if " " in searchprod:
    searchprod.replace(" ", "+")   #url-correcter

#get html encoding
h={'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'}

'''The above string is a specified user agent developed by Google Inc to render 
web pages and bypassing the bot check in amazon and flipkart firewall system'''

url='https://www.amazon.in/s?k='+searchprod+'&crid=8EC88KDQ73CJ&sprefix=iphone+1%2Caps%2C269&ref=nb_sb_noss_2'
r= requests.get(url, headers=h) 

#parse html
soup=BeautifulSoup(r.content, 'html.parser')

#pre-dec variables
ANames=[]
AOld_Prices=[]
ANew_Prices=[]
olist=[]

#name

prodname=soup.find_all('a', class_="a-link-normal s-underline-text s-underline-link-text s-link-style a-text-normal")
print("Search results for", searchprod,"->")
print()
print("The following are the products (Amazon Exclusive)")
for i in prodname:
    ANames.append(i.text)
print(ANames[2:5])
# the first two products were sponsored so skipped them

#price

oprice=soup.find_all('span', class_="a-price a-text-price") 
#old prices
nprice=soup.find_all('span', class_="a-price-whole")
#new prices
def rep(x,y): #incase of values repeating twice in list AOldprices
	mid=int(len(x)/2)
	b=x[0:mid]
	y.append(b)

    
for i in oprice:
    AOld_Prices.append(i.text)
    
for a in AOld_Prices[2:5]:
	rep(a,olist)
print(olist)

#In AOldprices, the value of the old price is repeted twice due to a bug in the website

#We fixed that bug using the rep() function and print old prices using olist

for i in nprice:
    ANew_Prices.append(i.text)
ANew_Prices= ["â‚¹"+ e for e in ANew_Prices]
print(ANew_Prices[2:5])

#FLIPKART EXTRACTION

searchprod=input("Enter product to be searched: ")
if " " in searchprod:
    searchprod.replace(" ", "%20")   #url-correcter

#get html
h={'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'}
#To bypass bot-check

url='https://www.flipkart.com/search?q='+searchprod+'&otracker=search&otracker1=search&marketplace=FLIPKART&as-show=on&as=off'
r= requests.get(url, headers=h) 

#parse html
soup=BeautifulSoup(r.content, 'html.parser')

#pre-dec variables
Names=[]
Old_Prices=[]
New_Prices=[]

#1st way of listing 

#name
prodname=soup.find_all('div', attrs={'class' :"_4rR01T"} )
# if bool(prodname)==True:`
if prodname:
        print("Search results for", searchprod,"->")
        print()

        for i in prodname:
            Names.append(i.text)
        print(Names[:3])
        #price
        oprice=soup.find_all('div', class_="_3I9_wc _27UcVY")
        nprice=soup.find_all('div', class_="_30jeq3 _1_WHN1")

        for i in oprice:
            Old_Prices.append(i.text)
        print(Old_Prices[:3])

        for i in nprice:
            New_Prices.append(i.text)
        print(New_Prices[:3])

# 2nd way of listing

if Names==[]:  #If code for first listing doesn't work
        #name
        prodname=soup.find_all('a' , class_="s1Q9rs")
        print("Search results for", searchprod,"->")
        print()

        for i in prodname:
            Names.append(i.text)
        print(Names[:3])
        #price
        oprice=soup.find_all('div', class_="_3I9_wc")
        nprice=soup.find_all('div', class_="_30jeq3") 
        for i in oprice:
            Old_Prices.append(i.text)
        print(Old_Prices[:3])
        
        for i in nprice:
            New_Prices.append(i.text)
        print(New_Prices[:3])

import pandas as pd
da=pd.DataFrame({'Product Name':ANames[2:5],'Old Price':olist,'New Price':ANew_Prices[2:5]})
df=pd.DataFrame({'Product Name':Names[2:5],'Old Price':Old_Prices[2:5],'New Price':New_Prices[2:5]})
da.head(4)
df.head(4)

htmla = da.to_html()
htmlf = df.to_html()

#write html to file
#text_file = open("index.html", "w")

html_prefix = '''<!DOCTYPE html>
<html lang="en">
<head>
  <title>Document</title>
  <style>
    table{
      width: 50%;
      margin: auto;
    }
  </style>
</head>
<body>'''

html_suffix = '''</body>
</html>'''

with open('index.html',"w", encoding="utf-8") as text_file:
    text_file.write(html_prefix)
    text_file.write(htmla)
    text_file.write(htmlf)
    text_file.write(html_suffix)
print("Done.")
